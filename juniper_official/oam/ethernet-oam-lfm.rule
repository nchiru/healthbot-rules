/*
 * Collects LFM state for a PE interface that connects to a CE
 *
 * Requirement 455 - https://paragon-automation.atlassian.net/browse/REQ-455
 *
 */
healthbot {
    topic oam {
        description "Collect LFM interface state";
        synopsis "OAM LFM discovery state analyzer";
        rule get-lfm-information {
            keys  [ lfm-interface-name ];
            synopsis "LFM discovery state analyzer";
            description "Monitors the discovery state for a PE interface which is connected to CE";
            sensor link-fault-management-information {
                synopsis "EVPN LFM iAgent sensor definition";
                description "Netconfig rpc get-evpn-lfm-information iAgent sensor to collect telemetry data from network device";
                iAgent {
                    file ethernet-oam-lfm.yml;
                    table EvpnLFMTable;
                    frequency 180s;
                }
            }
            field lfm-discovery-state {
                sensor link-fault-management-information {
                    path lfmd-discovery-state;
                }
                type string;
                description "Discovery state for a given interface";
                enumerate "Send Local Remote Ok" as 2;
                enumerate "Send Any" as 1;
                enumerate "Passive Wait" as 0;
                enumerate "Send Local Remote" as -1;
                enumerate "Active Send Local" as -2;
                enumerate "Fault" as -3;
            }
            field lfm-status {
                sensor link-fault-management-information {
                    path lfmd-status;
                }
                type string;
                description "Status of the established link";
                enumerate Fail as 0;
                enumerate Running as 1;
            }
            field lfm-interface-name {
                sensor link-fault-management-information {
                    where "lfmd-interface-name =~ /{{interface-name}}/";
                    path lfmd-interface-name;
                }
                type string;
                description "interface for which LFM info is collected";
            }
            trigger lfm-interface-discovery-state {
                synopsis "LFM discovery status KPI";
                description "Sets health based on LFM discovery state between PE and CE";
                frequency 1offset;
                term is-lfm-status-running-send-any {
                    when {
                        matches-with "$lfm-discovery-state" "Send Any" {
                            ignore-case;
                        }
                        matches-with "$lfm-status" "Running" {
                            ignore-case;
                        }
                    }
                    then {
                        status {
                            color green;
                            message "$lfm-interface-name LFM discovery-state: $lfm-discovery-state; lfm-status: $lfm-status";
                        }
                    }
                }
                term is-lfm-status-running-local-remote-ok {
                    when {
                        matches-with "$lfm-discovery-state" "Send Local Remote Ok" {
                            ignore-case;
                        }
                        matches-with "$lfm-status" "Running" {
                            ignore-case;
                        }
                    }
                    then {
                        status {
                            color green;
                            message "$lfm-interface-name LFM discovery-state: $lfm-discovery-state; lfm-status: $lfm-status";
                        }
                    }
                }
                term lfm-status-fault {
                    then {
                        status {
                            color red;
                            message "$lfm-interface-name LFM discovery-state: $lfm-discovery-state; lfm-status: $lfm-status";
                        }
                    }
                }
            }
            variable interface-name {
                value .*
                description "OAM interface to monitor, regular expression, e.g. 'ge-.*'";
                type string;
            }
            rule-properties {
                version 1;
                contributor juniper;
                supported-healthbot-version 4.0.0;
                supported-devices {
                    juniper {
                         operating-system junos {
                            products MX {
                                platforms All {
                                    releases 15.1R1 {
                                        release-support min-supported-release;
                                    }
                                }
                            }
                         }
                         operating-system junosEvolved {
                            products ACX {
                                platforms All {
                                    releases 22.1R1 {
                                        release-support min-supported-release;
                                    }
                                }
                            }
                        }						
                    }
                }
            }
        }
    }
}
